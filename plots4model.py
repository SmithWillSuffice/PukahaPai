#!/usr/bin/env python3
'''
model_plots.py
==============
This script generates an interactive plot of a model's simulation results
using Plotly. It reads a CSV file generated by the ODE solver, creates a
Plotly figure, and serves it via a simple HTTP server. The plot is opened
in the default web browser.

Example:
```bash
./model_plots.py pendulum
```
Copyright: (c) 2025 Bijou M. Smith
License: GNU General Public License v3.0 <https://www.gnu.org/licenses/gpl-
'''

import os
import pandas as pd
import plotly.io as pio
from stability import load_eigenvalues, generate_stability_figures, generate_stability_report_html
from plot_utils import (
    load_config, compute_derived_variables, plot_time_series,
    plot_phase_2d, plot_phase_3d
)


def main(model_name):
    model_dir = os.path.join("models", model_name)
    csv_path = os.path.join("models", f"{model_name}.csv")
    df = pd.read_csv(csv_path)

    config = load_config(model_name)
    df = compute_derived_variables(df, config)

    time_var = "t"
    value_vars = [col for col in df.columns if col != time_var]
    ts_figs = []
    stability_figs = []
    markdown_report = ""

    # --- Time series plots ---
    ts_vars = config.get("plots", {}).get("time_series", value_vars)
    max_vars_per_plot = config.get("max_vars_per_plot", 2)
    available_vars = set(df.columns)
    ts_vars = [v for v in ts_vars if v in available_vars]

    if len(ts_vars) > max_vars_per_plot:
        for i in range(0, len(ts_vars), max_vars_per_plot):
            subset = ts_vars[i:i + max_vars_per_plot]
            ts_figs.extend(plot_time_series(df, time_var, subset))
    else:
        ts_figs.extend(plot_time_series(df, time_var, ts_vars))

    # --- Phase plots ---
    phase_cfgs = config.get("plots", {}).get("phase", [])
    if not phase_cfgs:
        original_vars = config.get("variables", {}).get("names", [])
        if len(original_vars) in (2, 3):
            phase_cfgs = [{"vars": original_vars}]

    for cfg in phase_cfgs:
        vars_ = cfg["vars"]
        aspect = cfg.get("aspect", [1.0] * len(vars_))
        if not all(v in df.columns for v in vars_):
            continue
        if len(vars_) == 2:
            ts_figs.append(plot_phase_2d(df, vars_[0], vars_[1], aspect))
        elif len(vars_) == 3:
            ts_figs.append(plot_phase_3d(df, vars_[0], vars_[1], vars_[2], aspect))

    # --- Stability Analysis ---
    stability_enabled = config.get("eigenvalues", {}).get("all", False)
    eig_df = load_eigenvalues(model_name)
    if stability_enabled and eig_df is not None:
        stability_figs = generate_stability_figures(eig_df)
        report_path = generate_stability_report_html(model_name, eig_df)
        with open(report_path) as f:
            markdown_report = f.read()
    else:
        markdown_report = (
            "No stability analysis is available for this model.\n\n"
            "To generate a stability analysis use this in your toml file:\n"
            "<pre>\n[eigenvalues]\nall = true\n</pre>"
        )

    # --- Write HTML with Tabs ---
    '''
    Colours: 
    #009f6b  is a pastel green (active tab)
    #4997d0 is a nice muted celestialblue  (model title)
    ##5072a7 more muted blue than dodgerblue (inactive tab) 


    body {{ background-color: black; color: white; font-family: sans-serif; }}
    .tab-buttons {{ display: flex; gap: 1em; margin-bottom: 1em; }}
    .tab-buttons button {{ background-color: #5072a7; font-weight: bold; color: white; border: none; padding: 10px 20px; cursor: pointer; }}
    .tab-buttons button.active {{ background-color: #009f6b ; }} 
    .tab-content {{ display: none; }}
    .tab-content.active {{ display: block; }}
    .tab-content > div.plotly-graph-div {{
        width: 90%;
        margin: auto;
    }}
    pre {{ background-color: #222; padding: 1em; color: white; }}
    '''
    html_path = os.path.join("models", f"{model_name}.html")
    with open(html_path, "w") as f:
        f.write(f"""
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Model: {model_name}</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body {{
        background-color: black;
        color: white;
        font-family: sans-serif;
    }}
    .tab-buttons {{
        display: flex;
        gap: 1em;
        margin-bottom: 1em;
    }}
    .tab-buttons button {{
        background-color: #5072a7;
        font-weight: bold;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
    }}
    .tab-buttons button.active {{
        background-color: #009f6b;
    }}
    .tab-content {{
        display: none;
    }}
    .tab-content.active {{
        display: block;
    }}
    .plot-container {{
        width: 90%;
        margin: auto;
    }}
    pre {{
        background-color: #222;
        padding: 1em;
        color: white;
    }}
    .markdown-report {{
        padding: 1em;
        background-color: #111;
        color: #ddd;
    }}
  </style>
</head>
<body>
  <div class="tab-buttons">
    <button onclick="showTab('sim')" class="active">Sim Results</button>
    <button onclick="showTab('stability')">Stability</button>
  </div>
  <h1 style="color: #4997d0">Model: {model_name}</h1>
  <div id="sim" class="tab-content active">
""")
        # Add simulation figures
        for fig in ts_figs:
            #f.write(pio.to_html(fig, include_plotlyjs=False, full_html=False))
            f.write('<div class="plot-container">\n')
            f.write(pio.to_html(fig, include_plotlyjs=False, full_html=False, config={"responsive": True}))
            f.write('</div>\n')

        f.write("</div><div id=\"stability\" class=\"tab-content\">\n")

        # Add stability figures and markdown
        for fig in stability_figs:
            #f.write(pio.to_html(fig, include_plotlyjs=False, full_html=False))
            f.write('<div class="plot-container">\n')
            f.write(pio.to_html(fig, include_plotlyjs=False, full_html=False, config={"responsive": True}))
            f.write('</div>\n')

        # Markdown report
        f.write(f"<div class=\"markdown-report\">{markdown_report}</div>")

        f.write("""
  </div>
  <script>
    function showTab(id) {
      document.querySelectorAll('.tab-buttons button').forEach(btn => btn.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
      document.querySelector(`.tab-buttons button[onclick="showTab('${id}')"]`).classList.add('active');
      document.getElementById(id).classList.add('active');
    }
  </script>
</body>
</html>
""")
    print(f"HTML plot with tabs written to {html_path}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Generate interactive Plotly plots for a model with stability tab.")
    parser.add_argument("model_name", help="The name of the model (e.g., 'pendulum').")
    args = parser.parse_args()
    main(args.model_name)
